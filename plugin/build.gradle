plugins {
    id 'java-gradle-plugin'
//    id 'org.jetbrains.kotlin.plugin'
    id 'maven-publish'
    id 'jacoco'
    id "org.gradle.kotlin.kotlin-dsl" version "2.3.3"
}

description = "A Gradle plugin that compiles the Java files generated by the `java-spring-wiremock-stub-generator` annotation processor and builds a JAR file."

gradlePlugin {
    plugins {
        wiremockStubJarPlugin {
            id = 'io.github.lsd-consulting.gradle.kotlin-wiremock-stub-jar'
            implementationClass = 'io.lsdconsulting.wiremock.plugin.WiremockStubJarPlugin'
        }
    }
}
//compileKotlin.source()

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))
    implementation("org.jetbrains.kotlin:kotlin-gradle-plugin")
    implementation("org.jetbrains.kotlin:kotlin-gradle-plugin-api")
    implementation("org.jetbrains.kotlin:kotlin-gradle-plugin-model")
}

test {
    useJUnitPlatform()
    testLogging {
        events "failed"
        exceptionFormat "full"
    }
    finalizedBy jacocoTestReport
    afterSuite { desc, result ->
        if (!desc.parent) {
            logger.lifecycle("Test results: (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)")
            if (result.testCount == 0) {
                throw new IllegalStateException("No tests were found. Failing the build")
            }
        }
    }
}

jacoco {
    toolVersion = "0.8.7"
}

jacocoTestReport {
    reports {
        xml.enabled(true)
        html.enabled(true)
        html.destination(project.provider(() -> new File("${project.buildDir}/reports/coverage")))
    }
    dependsOn test
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifactId "${rootProject.name}-${project.name}"
            from components.java
        }
    }
}
